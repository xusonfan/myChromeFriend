name: Release on Manifest Change

on:
  push:
    branches:
      - main # 或者您的主分支名称，例如 master
    paths:
      - 'manifest.json'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取所有历史记录，以便生成完整的 changelog

      - name: Get version from manifest
        id: get_version
        run: echo "VERSION=$(jq -r .version manifest.json)" >> $GITHUB_OUTPUT

      - name: Package Extension
        id: package_extension
        uses: stefanzweifel/chrome-extension-pack-action@v1
        with:
          # 如果您有自己的签名文件 (.pem)，请确保已将其内容设置为名为 CHROME_EXTENSION_PRIVATE_KEY 的 Secret
          private-key: ${{ secrets.CHROME_EXTENSION_PRIVATE_KEY }}

      - name: Generate Changelog
        id: changelog
        run: |
          # 尝试获取最新的 tag，如果不存在则从第一个 commit 开始
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null)
          if [ -z "$LATEST_TAG" ]; then
            # 获取第一个 commit 的 hash
            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            LOG_RANGE="$FIRST_COMMIT..HEAD"
          else
            LOG_RANGE="$LATEST_TAG..HEAD"
          fi
          
          # 生成日志内容，并去除 conventional commit 前缀
          LOG_CONTENT=$(git log $LOG_RANGE --pretty=format:"- %s" | sed -E 's/^(feat|fix|chore|docs|style|refactor|perf|test)(\(.+\))?: //')
          
          # 将多行日志内容传递给下一步
          echo "changelog_body<<EOF" >> $GITHUB_OUTPUT
          echo "$LOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.changelog_body }}
          draft: false
          prerelease: false

      - name: Upload ZIP Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.package_extension.outputs.zip_path }}
          asset_name: my-chrome-friend-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload CRX Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.package_extension.outputs.crx_path }}
          asset_name: my-chrome-friend-${{ steps.get_version.outputs.VERSION }}.crx
          asset_content_type: application/x-chrome-extension